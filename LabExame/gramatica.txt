----------------- TO DO GREG -----------------
(OK) programa → declaração-lista
(OK) declaração-lista → declaração-lista declaração | declaração
(OK) declaração → var-declaração | fun-declaração
(OK) var-declaração → tipo-especificador ID ; | tipo-especificador ID [ NUM ] ;
(OK) fun-declaração → tipo-especificador ID ( params ) composto-decl
(OK) params → param-lista | void
(OK) param-lista → param-lista, param | param
(OK) param → tipo-especificador ID | tipo-especificador ID [ ]
(OK) composto-decl → { local-declarações statement-lista }
(OK) local-declarações → local-declarações var-declaração | vazio


------------ TO DO WERNECK -----------------------
(OK) statement-lista → statement-lista statement | vazio
(OK) statement → expressão-decl | composto-decl | seleção-decl | iteração-decl | retorno-decl
(OK) expressão-decl → expressão ; | ;
(OK) seleção-decl → if ( expressão ) statement | if ( expressão ) statement else statement
(OK) iteração-decl → while ( expressão ) statement
(OK) retorno-decl → return ; | return expressão;
(OK) expressão → var = expressão | simples-expressão
(OK) var → ID | ID [ expressão ]
(OK) simples-expressão → soma-expressão relacional soma-expressão | soma-expressão
(OK) soma-expressão → soma-expressão soma termo | termo
(OK) termo → termo mult fator | fator
(OK) fator → ( expressão ) | var | ativação | NUM
(OK) ativação → ID ( args )
(OK) args → arg-lista | vazio
(OK) arg-lista → arg-lista , expressão | expressão


------------- TERMINAIS ------------------
soma → + | -
mult → * | /
relacional → <= | < | > | >= | == | !=
tipo-especificador → int | void


// -----------------------------------------------------------------------------------
/* GRAMÁTICA DA PROFESSORA  */

/* program     : stmt_seq
                 { savedTree = $1;} 
            ;
stmt_seq    : stmt_seq SEMI stmt
                 { YYSTYPE t = $1;
                   if (t != NULL)
                   { while (t->sibling != NULL)
                        t = t->sibling;
                     t->sibling = $3;
                     $$ = $1; }
                     else $$ = $3;
                 }
            | stmt  { $$ = $1; }
            ;
stmt        : if_stmt { $$ = $1; }
            | repeat_stmt { $$ = $1; }
            | assign_stmt { $$ = $1; }
            | read_stmt { $$ = $1; }
            | write_stmt { $$ = $1; }
            | error  { $$ = NULL; }
            ;
if_stmt     : IF exp THEN stmt_seq END
                 { $$ = newStmtNode(IfK);
                   $$->child[0] = $2;
                   $$->child[1] = $4;
                 }
            | IF exp THEN stmt_seq ELSE stmt_seq END
                 { $$ = newStmtNode(IfK);
                   $$->child[0] = $2;
                   $$->child[1] = $4;
                   $$->child[2] = $6;
                 }
            ;
repeat_stmt : REPEAT stmt_seq UNTIL exp
                 { $$ = newStmtNode(RepeatK);
                   $$->child[0] = $2;
                   $$->child[1] = $4;
                 }
            ;
assign_stmt : ID { savedName = copyString(tokenString);
                   savedLineNo = lineno; }
              ASSIGN exp
                 { $$ = newStmtNode(AssignK);
                   $$->child[0] = $4;
                   $$->attr.name = savedName;
                   $$->lineno = savedLineNo;
                 }
            ;
read_stmt   : READ ID
                 { $$ = newStmtNode(ReadK);
                   $$->attr.name =
                     copyString(tokenString);
                 }
            ;
write_stmt  : WRITE exp
                 { $$ = newStmtNode(WriteK);
                   $$->child[0] = $2;
                 }
            ;
exp         : simple_exp LT simple_exp 
                 { $$ = newExpNode(OpK);
                   $$->child[0] = $1;
                   $$->child[1] = $3;
                   $$->attr.op = LT;
                 }
            | simple_exp LTE simple_exp
                 { $$ = newExpNode(OpK);
                   $$->child[0] = $1;
                   $$->child[1] = $3;
                   $$->attr.op = LTE;
                 }
            | simple_exp RT simple_exp
                 { $$ = newExpNode(OpK);
                   $$->child[0] = $1;
                   $$->child[1] = $3;
                   $$->attr.op = RT;
                 }
            | simple_exp RTE simple_exp
                 { $$ = newExpNode(OpK);
                   $$->child[0] = $1;
                   $$->child[1] = $3;
                   $$->attr.op = RTE;
                 }     
            | simple_exp EQ simple_exp
                 { $$ = newExpNode(OpK);
                   $$->child[0] = $1;
                   $$->child[1] = $3;
                   $$->attr.op = EQ;
                 }
            | simple_exp DIF simple_exp
                 { $$ = newExpNode(OpK);
                   $$->child[0] = $1;
                   $$->child[1] = $3;
                   $$->attr.op = DIF;
                 }
            | simple_exp { $$ = $1; }
            ;
simple_exp  : simple_exp PLUS term 
                 { $$ = newExpNode(OpK);
                   $$->child[0] = $1;
                   $$->child[1] = $3;
                   $$->attr.op = PLUS;
                 }
            | simple_exp MINUS term
                 { $$ = newExpNode(OpK);
                   $$->child[0] = $1;
                   $$->child[1] = $3;
                   $$->attr.op = MINUS;
                 } 
            | term { $$ = $1; }
            ;
            
term        : term TIMES factor 
                 { $$ = newExpNode(OpK);
                   $$->child[0] = $1;
                   $$->child[1] = $3;
                   $$->attr.op = TIMES;
                 }
            | term OVER factor
                 { $$ = newExpNode(OpK);
                   $$->child[0] = $1;
                   $$->child[1] = $3;
                   $$->attr.op = OVER;
                 }
            | factor { $$ = $1; }
            ;
factor      : LPAREN exp RPAREN
                 { $$ = $2; }
            | NUM
                 { $$ = newExpNode(ConstK);
                   $$->attr.val = atoi(tokenString);
                 }
            | ID { $$ = newExpNode(IdK);
                   $$->attr.name =
                         copyString(tokenString);
                 }
            | error { $$ = NULL; }
            ; */